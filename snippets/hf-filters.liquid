{% comment %}
  Harbour & Field Custom Filters Snippet
  Enhanced filtering for shirts with size, color, fit, and price filters
{% endcomment %}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign total_active_values = 0
  assign results_url = results.url | default: ''
-%}

<div class="hf-filters" data-hf-filters>
  <div class="hf-filters__header">
    <h3 class="hf-filters__title">Filter by</h3>
    <button type="button" class="hf-filters__clear" data-clear-filters>
      Clear all
    </button>
  </div>

  <form class="hf-filters__form" id="HFFacetFiltersForm">
    {%- if results.terms -%}
      <input type="hidden" name="q" value="{{ results.terms | escape }}">
      <input name="options[prefix]" type="hidden" value="last">
    {%- endif -%}

    <div class="hf-filters__sections">
      
      <!-- Size Filter -->
      <div class="hf-filters__section">
        <h4 class="hf-filters__section-title">Size</h4>
        <div class="hf-filters__options hf-filters__options--size">
          {%- assign size_options = 'XS,S,M,L,XL,XXL' | split: ',' -%}
          {%- for size in size_options -%}
            <label class="hf-filters__option hf-filters__option--size">
              <input 
                type="checkbox" 
                name="filter.v.option.size" 
                value="{{ size | downcase }}"
                class="hf-filters__checkbox"
                data-filter="size"
              >
              <span class="hf-filters__option-text">{{ size }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Color Filter -->
      <div class="hf-filters__section">
        <h4 class="hf-filters__section-title">Color</h4>
        <div class="hf-filters__options hf-filters__options--color">
          {%- assign color_options = 'White,Black,Navy,Blue,Gray,Green,Red,Beige' | split: ',' -%}
          {%- for color in color_options -%}
            <label class="hf-filters__option hf-filters__option--color">
              <input 
                type="checkbox" 
                name="filter.v.option.color" 
                value="{{ color | downcase }}"
                class="hf-filters__checkbox"
                data-filter="color"
              >
              <span class="hf-filters__color-swatch" style="background-color: {{ color | downcase }};"></span>
              <span class="hf-filters__option-text">{{ color }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Fit Filter -->
      <div class="hf-filters__section">
        <h4 class="hf-filters__section-title">Fit</h4>
        <div class="hf-filters__options hf-filters__options--fit">
          {%- assign fit_options = 'Slim,Regular,Relaxed' | split: ',' -%}
          {%- for fit in fit_options -%}
            <label class="hf-filters__option hf-filters__option--fit">
              <input 
                type="checkbox" 
                name="filter.v.option.fit" 
                value="{{ fit | downcase }}"
                class="hf-filters__checkbox"
                data-filter="fit"
              >
              <span class="hf-filters__option-text">{{ fit }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Price Filter -->
      <div class="hf-filters__section">
        <h4 class="hf-filters__section-title">Price</h4>
        <div class="hf-filters__options hf-filters__options--price">
          <label class="hf-filters__option hf-filters__option--price">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="0"
              class="hf-filters__checkbox"
              data-filter="price"
            >
            <span class="hf-filters__option-text">Under $50</span>
          </label>
          <label class="hf-filters__option hf-filters__option--price">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="5000"
              class="hf-filters__checkbox"
              data-filter="price"
            >
            <span class="hf-filters__option-text">$50 - $100</span>
          </label>
          <label class="hf-filters__option hf-filters__option--price">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="10000"
              class="hf-filters__checkbox"
              data-filter="price"
            >
            <span class="hf-filters__option-text">$100+</span>
          </label>
        </div>
      </div>

      <!-- Availability Filter -->
      <div class="hf-filters__section">
        <h4 class="hf-filters__section-title">Availability</h4>
        <div class="hf-filters__options hf-filters__options--availability">
          <label class="hf-filters__option hf-filters__option--availability">
            <input 
              type="checkbox" 
              name="filter.v.availability" 
              value="1"
              class="hf-filters__checkbox"
              data-filter="availability"
            >
            <span class="hf-filters__option-text">In Stock</span>
          </label>
          <label class="hf-filters__option hf-filters__option--availability">
            <input 
              type="checkbox" 
              name="filter.v.availability" 
              value="0"
              class="hf-filters__checkbox"
              data-filter="availability"
            >
            <span class="hf-filters__option-text">Pre-order</span>
          </label>
        </div>
      </div>

    </div>

    <div class="hf-filters__actions">
      <button type="submit" class="button button--primary hf-filters__apply">
        Apply Filters
      </button>
      <button type="button" class="button button--secondary hf-filters__reset" data-reset-filters>
        Reset
      </button>
    </div>
  </form>
</div>

<style>
  .hf-filters {
    background: rgb(var(--color-background));
    border: 1px solid rgba(var(--color-foreground), 0.1);
    border-radius: 8px;
    padding: 2rem;
    margin-bottom: 2rem;
  }

  .hf-filters__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid rgba(var(--color-foreground), 0.1);
  }

  .hf-filters__title {
    margin: 0;
    font-size: 1.8rem;
    font-weight: 600;
    color: rgb(var(--color-foreground));
  }

  .hf-filters__clear {
    background: none;
    border: none;
    color: rgb(var(--color-accent-1));
    font-size: 1.4rem;
    font-weight: 500;
    cursor: pointer;
    text-decoration: underline;
  }

  .hf-filters__clear:hover {
    opacity: 0.8;
  }

  .hf-filters__sections {
    display: grid;
    gap: 2rem;
  }

  .hf-filters__section {
    border-bottom: 1px solid rgba(var(--color-foreground), 0.05);
    padding-bottom: 1.5rem;
  }

  .hf-filters__section:last-child {
    border-bottom: none;
    padding-bottom: 0;
  }

  .hf-filters__section-title {
    margin: 0 0 1rem 0;
    font-size: 1.4rem;
    font-weight: 600;
    color: rgb(var(--color-foreground));
  }

  .hf-filters__options {
    display: grid;
    gap: 0.8rem;
  }

  .hf-filters__options--size {
    grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
  }

  .hf-filters__options--color {
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  }

  .hf-filters__options--fit {
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
  }

  .hf-filters__options--price,
  .hf-filters__options--availability {
    grid-template-columns: 1fr;
  }

  .hf-filters__option {
    display: flex;
    align-items: center;
    gap: 0.8rem;
    padding: 0.8rem;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  .hf-filters__option:hover {
    background: rgba(var(--color-accent-1), 0.05);
  }

  .hf-filters__checkbox {
    margin: 0;
    width: 16px;
    height: 16px;
    accent-color: rgb(var(--color-accent-1));
  }

  .hf-filters__option-text {
    font-size: 1.3rem;
    font-weight: 500;
    color: rgb(var(--color-foreground));
  }

  .hf-filters__color-swatch {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 2px solid rgba(var(--color-foreground), 0.1);
    flex-shrink: 0;
  }

  .hf-filters__actions {
    display: flex;
    gap: 1rem;
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid rgba(var(--color-foreground), 0.1);
  }

  .hf-filters__apply,
  .hf-filters__reset {
    flex: 1;
    justify-content: center;
  }

  @media screen and (max-width: 749px) {
    .hf-filters {
      padding: 1.5rem;
    }
    
    .hf-filters__options--size {
      grid-template-columns: repeat(3, 1fr);
    }
    
    .hf-filters__options--color {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  // Harbour & Field Filter Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterForm = document.getElementById('HFFacetFiltersForm');
    const clearButton = document.querySelector('[data-clear-filters]');
    const resetButton = document.querySelector('[data-reset-filters]');
    const checkboxes = document.querySelectorAll('.hf-filters__checkbox');
    
    if (!filterForm) return;
    
    // Clear all filters
    function clearFilters() {
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      filterForm.submit();
    }
    
    // Reset filters
    function resetFilters() {
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
    }
    
    // Apply filters
    function applyFilters() {
      filterForm.submit();
    }
    
    // Event listeners
    if (clearButton) {
      clearButton.addEventListener('click', clearFilters);
    }
    
    if (resetButton) {
      resetButton.addEventListener('click', resetFilters);
    }
    
    // Auto-apply on checkbox change
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // Debounce the filter application
        clearTimeout(this.filterTimeout);
        this.filterTimeout = setTimeout(() => {
          applyFilters();
        }, 300);
      });
    });
    
    // Update active filter count
    function updateActiveCount() {
      const activeFilters = document.querySelectorAll('.hf-filters__checkbox:checked').length;
      const clearButton = document.querySelector('[data-clear-filters]');
      
      if (clearButton) {
        if (activeFilters > 0) {
          clearButton.textContent = `Clear all (${activeFilters})`;
          clearButton.style.opacity = '1';
        } else {
          clearButton.textContent = 'Clear all';
          clearButton.style.opacity = '0.5';
        }
      }
    }
    
    // Initialize
    updateActiveCount();
    
    // Update count on change
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateActiveCount);
    });
  });
</script>

{% comment %}
  Harbour & Field Custom Filters Snippet
  Enhanced filtering for shirts with size, color, fit, and price filters
{% endcomment %}

{%- liquid
  assign sort_by = results.sort_by | default: results.default_sort_by
  assign total_active_values = 0
  assign results_url = results.url | default: ''
-%}

<div class="hf-filters-compact" data-hf-filters>
  <form class="hf-filters-compact__form" id="HFFacetFiltersForm">
    {%- if results.terms -%}
      <input type="hidden" name="q" value="{{ results.terms | escape }}">
      <input name="options[prefix]" type="hidden" value="last">
    {%- endif -%}

    <div class="hf-filters-compact__row">
      <!-- Size Filter -->
      <div class="hf-filters-compact__group">
        <label class="hf-filters-compact__label">Size</label>
        <div class="hf-filters-compact__options">
          {%- assign size_options = 'XS,S,M,L,XL,XXL' | split: ',' -%}
          {%- for size in size_options -%}
            <label class="hf-filters-compact__option">
              <input 
                type="checkbox" 
                name="filter.v.option.size" 
                value="{{ size | downcase }}"
                class="hf-filters-compact__checkbox"
                data-filter="size"
              >
              <span class="hf-filters-compact__text">{{ size }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Color Filter -->
      <div class="hf-filters-compact__group">
        <label class="hf-filters-compact__label">Color</label>
        <div class="hf-filters-compact__options">
          {%- assign color_options = 'White,Black,Navy,Blue,Gray,Green,Red,Beige' | split: ',' -%}
          {%- for color in color_options -%}
            <label class="hf-filters-compact__option">
              <input 
                type="checkbox" 
                name="filter.v.option.color" 
                value="{{ color | downcase }}"
                class="hf-filters-compact__checkbox"
                data-filter="color"
              >
              <span class="hf-filters-compact__swatch" style="background-color: {{ color | downcase }};"></span>
              <span class="hf-filters-compact__text">{{ color }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Fit Filter -->
      <div class="hf-filters-compact__group">
        <label class="hf-filters-compact__label">Fit</label>
        <div class="hf-filters-compact__options">
          {%- assign fit_options = 'Slim,Regular,Relaxed' | split: ',' -%}
          {%- for fit in fit_options -%}
            <label class="hf-filters-compact__option">
              <input 
                type="checkbox" 
                name="filter.v.option.fit" 
                value="{{ fit | downcase }}"
                class="hf-filters-compact__checkbox"
                data-filter="fit"
              >
              <span class="hf-filters-compact__text">{{ fit }}</span>
            </label>
          {%- endfor -%}
        </div>
      </div>

      <!-- Price Filter -->
      <div class="hf-filters-compact__group">
        <label class="hf-filters-compact__label">Price</label>
        <div class="hf-filters-compact__options">
          <label class="hf-filters-compact__option">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="0"
              class="hf-filters-compact__checkbox"
              data-filter="price"
            >
            <span class="hf-filters-compact__text">Under $50</span>
          </label>
          <label class="hf-filters-compact__option">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="5000"
              class="hf-filters-compact__checkbox"
              data-filter="price"
            >
            <span class="hf-filters-compact__text">$50-$100</span>
          </label>
          <label class="hf-filters-compact__option">
            <input 
              type="checkbox" 
              name="filter.v.price.gte" 
              value="10000"
              class="hf-filters-compact__checkbox"
              data-filter="price"
            >
            <span class="hf-filters-compact__text">$100+</span>
          </label>
        </div>
      </div>

      <!-- Actions -->
      <div class="hf-filters-compact__actions">
        <button type="button" class="hf-filters-compact__clear" data-clear-filters>
          Clear all
        </button>
      </div>
    </div>
  </form>
</div>

<style>
  .hf-filters-compact {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
  }

  .hf-filters-compact__row {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    align-items: flex-end;
  }

  .hf-filters-compact__group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    min-width: 120px;
  }

  .hf-filters-compact__label {
    font-size: 0.9rem;
    font-weight: 600;
    color: #495057;
    margin: 0;
  }

  .hf-filters-compact__options {
    display: flex;
    flex-wrap: wrap;
    gap: 0.4rem;
  }

  .hf-filters-compact__option {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    padding: 0.4rem 0.8rem;
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.85rem;
  }

  .hf-filters-compact__option:hover {
    background: #f8f9fa;
    border-color: #007bff;
  }

  .hf-filters-compact__checkbox:checked + .hf-filters-compact__text {
    color: #007bff;
    font-weight: 600;
  }

  .hf-filters-compact__checkbox:checked ~ .hf-filters-compact__swatch {
    border-color: #007bff;
    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
  }

  .hf-filters-compact__checkbox {
    margin: 0;
    width: 14px;
    height: 14px;
    accent-color: #007bff;
  }

  .hf-filters-compact__text {
    font-size: 0.85rem;
    color: #495057;
    white-space: nowrap;
  }

  .hf-filters-compact__swatch {
    width: 16px;
    height: 16px;
    border-radius: 50%;
    border: 2px solid #dee2e6;
    flex-shrink: 0;
  }

  .hf-filters-compact__actions {
    display: flex;
    align-items: center;
  }

  .hf-filters-compact__clear {
    background: none;
    border: none;
    color: #6c757d;
    font-size: 0.85rem;
    cursor: pointer;
    text-decoration: underline;
    padding: 0.4rem 0.8rem;
    border-radius: 6px;
    transition: all 0.2s ease;
  }

  .hf-filters-compact__clear:hover {
    background: #f8f9fa;
    color: #495057;
  }

  @media screen and (max-width: 749px) {
    .hf-filters-compact__row {
      flex-direction: column;
      gap: 1rem;
    }
    
    .hf-filters-compact__group {
      min-width: auto;
    }
    
    .hf-filters-compact__options {
      flex-wrap: wrap;
    }
  }

  @media screen and (max-width: 480px) {
    .hf-filters-compact {
      padding: 0.8rem;
    }
    
    .hf-filters-compact__option {
      padding: 0.3rem 0.6rem;
      font-size: 0.8rem;
    }
  }
</style>

<script>
  // Harbour & Field Filter Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const filterForm = document.getElementById('HFFacetFiltersForm');
    const clearButton = document.querySelector('[data-clear-filters]');
    const resetButton = document.querySelector('[data-reset-filters]');
    const checkboxes = document.querySelectorAll('.hf-filters__checkbox');
    
    if (!filterForm) return;
    
    // Clear all filters
    function clearFilters() {
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
      filterForm.submit();
    }
    
    // Reset filters
    function resetFilters() {
      checkboxes.forEach(checkbox => {
        checkbox.checked = false;
      });
    }
    
    // Apply filters
    function applyFilters() {
      filterForm.submit();
    }
    
    // Event listeners
    if (clearButton) {
      clearButton.addEventListener('click', clearFilters);
    }
    
    if (resetButton) {
      resetButton.addEventListener('click', resetFilters);
    }
    
    // Auto-apply on checkbox change
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', function() {
        // Debounce the filter application
        clearTimeout(this.filterTimeout);
        this.filterTimeout = setTimeout(() => {
          applyFilters();
        }, 300);
      });
    });
    
    // Update active filter count
    function updateActiveCount() {
      const activeFilters = document.querySelectorAll('.hf-filters__checkbox:checked').length;
      const clearButton = document.querySelector('[data-clear-filters]');
      
      if (clearButton) {
        if (activeFilters > 0) {
          clearButton.textContent = `Clear all (${activeFilters})`;
          clearButton.style.opacity = '1';
        } else {
          clearButton.textContent = 'Clear all';
          clearButton.style.opacity = '0.5';
        }
      }
    }
    
    // Initialize
    updateActiveCount();
    
    // Update count on change
    checkboxes.forEach(checkbox => {
      checkbox.addEventListener('change', updateActiveCount);
    });
  });
</script>
